# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper.rb"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require 'rubygems'
require 'bundler/setup'

require 'rspec/its'
require 'date' # Needed for stamp
require 'stamp' # Some reasons stamp doesn't load automatically?
require 'vcr'

ENV['QT_KEYS'] ||= 'test_key_1,test_key_2'
qt_keys = ENV['QT_KEYS'].split(',')
VCR.configure do |c|
  c.cassette_library_dir = 'spec/support/cassettes'
  c.default_cassette_options = { match_requests_on: [:method, :uri, :body] }
  c.filter_sensitive_data('<QT_KEY>')   { qt_keys[0] }
  c.filter_sensitive_data('<QT_KEY_2>') { qt_keys[1] }
  c.hook_into :fakeweb
end

MINIMUM_COVERAGE = 74

if ENV['COVERAGE']
  require 'simplecov'
  require 'simplecov-rcov'
  SimpleCov.formatter = SimpleCov::Formatter::RcovFormatter
  SimpleCov.start do
    add_filter '/vendor/'
    add_filter '/spec/'
    add_group 'lib', 'lib'
  end
  SimpleCov.at_exit do
    SimpleCov.result.format!
    percent = SimpleCov.result.covered_percent
    unless percent >= MINIMUM_COVERAGE
      puts "Coverage must be above #{MINIMUM_COVERAGE}%. It is #{'%.2f' % percent}%"
      Kernel.exit(1)
    end
  end
end

require 'quick_travel/config'
QuickTravel.configure do |c|
  c.url = 'http://0.0.0.0:8080'
  c.access_key = qt_keys[0]
end

require 'quick_travel/connection_error'
require 'quick_travel/constants'
require 'quick_travel/cache'

class HashCache
  def initialize
    @cache = {}
  end

  def read(name)
    @cache[name]
  end

  def write(name, value, _ = nil)
    @cache[name] = value
  end
end

QuickTravel::Cache.cache_store = HashCache.new

RSpec.configure do |config|
  config.run_all_when_everything_filtered = true
  config.filter_run :focus
  config.before :each do
    allow(QuickTravel::Adapter).to receive(:cache) { ActiveSupport::Cache::MemoryStore.new }
  end
end
